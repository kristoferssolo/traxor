use transmission_rpc::types::{ErrorType, Torrent, TorrentGetField, TorrentStatus};

mod filesize;
mod netspeed;

use crate::app::utils::filesize::FileSize;
use crate::app::utils::netspeed::NetSpeed;

pub trait Wrapper {
    fn title(&self) -> String {
        "".to_string()
    }

    fn value(&self, torrent: &Torrent) -> String {
        format!("{}", torrent.name.as_ref().unwrap_or(&String::from("")))
    }

    fn width(&self) -> u16 {
        0
    }
}

impl Wrapper for TorrentGetField {
    fn title(&self) -> String {
        match self {
            Self::ActivityDate => "Activity Date".to_string(),
            Self::AddedDate => "Added Date".to_string(),
            Self::Availability => todo!(),
            Self::BandwidthPriority => todo!(),
            Self::Comment => todo!(),
            Self::CorruptEver => todo!(),
            Self::Creator => todo!(),
            Self::DateCreated => todo!(),
            Self::DesiredAvailable => todo!(),
            Self::DoneDate => "Done Date".to_string(),
            Self::DownloadDir => "Path".to_string(),
            Self::DownloadLimit => todo!(),
            Self::DownloadLimited => todo!(),
            Self::DownloadedEver => todo!(),
            Self::EditDate => "Edit Date".to_string(),
            Self::Error => "Error Type".to_string(),
            Self::ErrorString => "Error String".to_string(),
            Self::Eta => "ETA".to_string(),
            Self::EtaIdle => todo!(),
            Self::FileCount => todo!(),
            Self::FileStats => "File Stats".to_string(),
            Self::Files => "Files".to_string(),
            Self::Group => todo!(),
            Self::HashString => "Hash String".to_string(),
            Self::HaveUnchecked => todo!(),
            Self::HaveValid => todo!(),
            Self::HonorsSessionLimits => todo!(),
            Self::Id => "Id".to_string(),
            Self::IsFinished => "Finished".to_string(),
            Self::IsPrivate => "Private".to_string(),
            Self::IsStalled => "Stalled".to_string(),
            Self::Labels => "Labels".to_string(),
            Self::LeftUntilDone => "Left Until Done".to_string(),
            Self::MagnetLink => todo!(),
            Self::ManualAnnounceTime => todo!(),
            Self::MaxConnectedPeers => todo!(),
            Self::MetadataPercentComplete => "Metadata Percent Complete".to_string(),
            Self::Name => "Name".to_string(),
            Self::PeerLimit => todo!(),
            Self::Peers => todo!(),
            Self::PeersConnected => "Connected".to_string(),
            Self::PeersFrom => todo!(),
            Self::PeersGettingFromUs => "Peers".to_string(),
            Self::PeersSendingToUs => "Seeds".to_string(),
            Self::PercentComplete => todo!(),
            Self::PercentDone => "%".to_string(),
            Self::PieceCount => todo!(),
            Self::PieceSize => todo!(),
            Self::Pieces => todo!(),
            Self::PrimaryMimeType => todo!(),
            Self::Priorities => "Priorities".to_string(),
            Self::QueuePosition => "Queue".to_string(),
            Self::RateDownload => "Download Speed".to_string(),
            Self::RateUpload => "Upload Speed".to_string(),
            Self::RecheckProgress => "Progress".to_string(),
            Self::SecondsDownloading => todo!(),
            Self::SecondsSeeding => "Seconds Seeding".to_string(),
            Self::SeedIdleLimit => todo!(),
            Self::SeedIdleMode => todo!(),
            Self::SeedRatioLimit => "Seed Ratio Limit".to_string(),
            Self::SeedRatioMode => "Seed Ratio Mode".to_string(),
            Self::SequentialDownload => todo!(),
            Self::SizeWhenDone => "Size".to_string(),
            Self::StartDate => todo!(),
            Self::Status => "Status".to_string(),
            Self::TorrentFile => "Torrent File".to_string(),
            Self::TotalSize => "Total Size".to_string(),
            Self::TrackerList => todo!(),
            Self::TrackerStats => todo!(),
            Self::Trackers => "Trackers".to_string(),
            Self::UploadLimit => todo!(),
            Self::UploadLimited => todo!(),
            Self::UploadRatio => "Ratio".to_string(),
            Self::UploadedEver => "Uploaded".to_string(),
            Self::Wanted => "Wanted".to_string(),
            Self::Webseeds => todo!(),
            Self::WebseedsSendingToUs => "Webseeds Sending to Us".to_string(),
        }
    }

    fn value(&self, torrent: &Torrent) -> String {
        match self {
            Self::ActivityDate => torrent.activity_date.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::AddedDate => torrent.added_date.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::Availability => todo!(),
            Self::BandwidthPriority => todo!(),
            Self::Comment => todo!(),
            Self::CorruptEver => todo!(),
            Self::Creator => todo!(),
            Self::DateCreated => todo!(),
            Self::DesiredAvailable => todo!(),
            Self::DoneDate => torrent.done_date.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::DownloadDir => torrent.download_dir.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::DownloadLimit => todo!(),
            Self::DownloadLimited => todo!(),
            Self::DownloadedEver => todo!(),
            Self::EditDate => torrent.edit_date.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::Error => match torrent.error {
                Some(error) => match error {
                    ErrorType::Ok => "Ok".to_string(),
                    ErrorType::LocalError => "LocalError".to_string(),
                    ErrorType::TrackerError => "TrackerError".to_string(),
                    ErrorType::TrackerWarning => "TrackerWarning".to_string(),
                },
                None => "N/A".to_string(),
            },
            Self::ErrorString => torrent.error_string.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::Eta => match torrent.eta {
                Some(eta) => match eta {
                    -1 => "".to_string(),
                    -2 => "?".to_string(),
                    _ => format!("{} s", eta),
                },
                None => "".to_string(),
            },
            Self::EtaIdle => todo!(),
            Self::FileCount => todo!(),
            Self::FileStats => match &torrent.file_stats {
                Some(file_stats) => file_stats
                    .iter()
                    .map(|x| format!("{:?}", x.priority))
                    .collect(),
                None => "N/A".to_string(),
            },
            Self::Files => match &torrent.files {
                Some(files) => files.iter().map(|x| x.name.to_owned()).collect(),
                None => "N/A".to_string(),
            },
            Self::Group => todo!(),
            Self::HashString => torrent.hash_string.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::HaveUnchecked => todo!(),
            Self::HaveValid => todo!(),
            Self::HonorsSessionLimits => todo!(),
            Self::Id => torrent.id.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::IsFinished => torrent.is_finished.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::IsPrivate => torrent.is_private.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::IsStalled => torrent.is_stalled.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::Labels => torrent.labels.as_ref().map_or_else(|| "N/A".to_string(), |v| v.join(" ")),
            Self::LeftUntilDone => FileSize::from(torrent.left_until_done.unwrap_or(0)).to_string(),
            Self::MagnetLink => todo!(),
            Self::ManualAnnounceTime => todo!(),
            Self::MaxConnectedPeers => todo!(),
            Self::MetadataPercentComplete => torrent.metadata_percent_complete.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::Name => torrent.name.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::PeerLimit => todo!(),
            Self::Peers => todo!(),
            Self::PeersConnected => torrent.peers_connected.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::PeersFrom => todo!(),
            Self::PeersGettingFromUs => torrent.peers_getting_from_us.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::PeersSendingToUs => torrent.peers_sending_to_us.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::PercentComplete => todo!(),
            Self::PercentDone => match torrent.percent_done {
                Some(percent_done) => format!("{:.0}", percent_done * 100.0),
                None => "N/A".to_string(),
            },
            Self::PieceCount => todo!(),
            Self::PieceSize => todo!(),
            Self::Pieces => todo!(),
            Self::PrimaryMimeType => todo!(),
            Self::Priorities => match &torrent.priorities {
                Some(priorities) => priorities.iter().map(|x| format!("{:?}", x)).collect(),
                None => "N/A".to_string(),
            },
            Self::QueuePosition => "N/A".to_string(),
            Self::RateDownload => NetSpeed::from(torrent.rate_download.unwrap_or(0)).to_string(),
            Self::RateUpload => NetSpeed::from(torrent.rate_upload.unwrap_or(0)).to_string(),
            Self::RecheckProgress => torrent.recheck_progress.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::SecondsDownloading => todo!(),
            Self::SecondsSeeding => torrent.seconds_seeding.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::SeedIdleLimit => todo!(),
            Self::SeedIdleMode => todo!(),
            Self::SeedRatioLimit => torrent.seed_ratio_limit.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::SeedRatioMode => "N/A".to_string(),
            Self::SequentialDownload => todo!(),
            Self::SizeWhenDone => FileSize::from(torrent.size_when_done.unwrap_or(0)).to_string(),
            Self::StartDate => todo!(),
            Self::Status => match torrent.status {
                Some(status) => match status {
                    TorrentStatus::Stopped => "Stopped".to_string(),
                    TorrentStatus::Seeding => "Seeding".to_string(),
                    TorrentStatus::Verifying => "Verifying".to_string(),
                    TorrentStatus::Downloading => "Downloading".to_string(),
                    TorrentStatus::QueuedToSeed => "QueuedToSeed".to_string(),
                    TorrentStatus::QueuedToVerify => "QueuedToVerify".to_string(),
                    TorrentStatus::QueuedToDownload => "QueuedToDownload".to_string(),
                },
                None => "N/A".to_string(),
            },
            Self::TorrentFile => torrent.torrent_file.as_ref().map_or_else(|| "N/A".to_string(), |v| v.to_string()),
            Self::TotalSize => FileSize::from(torrent.total_size.unwrap_or(0)).to_string(),
            Self::TrackerList => todo!(),
            Self::TrackerStats => todo!(),
            Self::Trackers => match &torrent.trackers {
                Some(trackers) => trackers.iter().map(|x| x.announce.to_string()).collect(),
                None => "N/A".to_string(),
            },
            Self::UploadLimit => todo!(),
            Self::UploadLimited => todo!(),
            Self::UploadRatio => match torrent.upload_ratio {
                Some(upload_ratio) => format!("{:.2}", upload_ratio),
                None => "N/A".to_string(),
            },
            Self::UploadedEver => FileSize::from(torrent.uploaded_ever.unwrap_or(0)).to_string(),
            Self::Wanted => match &torrent.wanted {
                Some(wanted) => wanted.iter().map(|x| x.to_string()).collect(),
                None => "N/A".to_string(),
            },
            Self::Webseeds => todo!(),
            Self::WebseedsSendingToUs => "N/A".to_string(),
        }
    }

    fn width(&self) -> u16 {
        match self {
            Self::ActivityDate => 10,
            Self::AddedDate => 10,
            Self::Availability => todo!(),
            Self::BandwidthPriority => todo!(),
            Self::Comment => todo!(),
            Self::CorruptEver => todo!(),
            Self::Creator => todo!(),
            Self::DateCreated => todo!(),
            Self::DesiredAvailable => todo!(),
            Self::DoneDate => 10,
            Self::DownloadDir => 30,
            Self::DownloadLimit => todo!(),
            Self::DownloadLimited => todo!(),
            Self::DownloadedEver => todo!(),
            Self::EditDate => 10,
            Self::Error => 10,
            Self::ErrorString => 10,
            Self::Eta => 10,
            Self::EtaIdle => todo!(),
            Self::FileCount => todo!(),
            Self::FileStats => 10,
            Self::Files => 10,
            Self::Group => todo!(),
            Self::HashString => 10,
            Self::HaveUnchecked => todo!(),
            Self::HaveValid => todo!(),
            Self::HonorsSessionLimits => todo!(),
            Self::Id => 10,
            Self::IsFinished => 10,
            Self::IsPrivate => 10,
            Self::IsStalled => 10,
            Self::Labels => 10,
            Self::LeftUntilDone => 10,
            Self::MagnetLink => todo!(),
            Self::ManualAnnounceTime => todo!(),
            Self::MaxConnectedPeers => todo!(),
            Self::MetadataPercentComplete => 10,
            Self::Name => 70,
            Self::PeerLimit => todo!(),
            Self::Peers => todo!(),
            Self::PeersConnected => 10,
            Self::PeersFrom => todo!(),
            Self::PeersGettingFromUs => 10,
            Self::PeersSendingToUs => 10,
            Self::PercentComplete => todo!(),
            Self::PercentDone => 10,
            Self::PieceCount => todo!(),
            Self::PieceSize => todo!(),
            Self::Pieces => todo!(),
            Self::PrimaryMimeType => todo!(),
            Self::Priorities => 10,
            Self::QueuePosition => 10,
            Self::RateDownload => 10,
            Self::RateUpload => 10,
            Self::RecheckProgress => 10,
            Self::SecondsDownloading => todo!(),
            Self::SecondsSeeding => 10,
            Self::SeedIdleLimit => todo!(),
            Self::SeedIdleMode => todo!(),
            Self::SeedRatioLimit => 10,
            Self::SeedRatioMode => 10,
            Self::SequentialDownload => todo!(),
            Self::SizeWhenDone => 10,
            Self::StartDate => todo!(),
            Self::Status => 15,
            Self::TorrentFile => 10,
            Self::TotalSize => 10,
            Self::TrackerList => todo!(),
            Self::TrackerStats => todo!(),
            Self::Trackers => 10,
            Self::UploadLimit => todo!(),
            Self::UploadLimited => todo!(),
            Self::UploadRatio => 10,
            Self::UploadedEver => 10,
            Self::Wanted => 10,
            Self::Webseeds => todo!(),
            Self::WebseedsSendingToUs => 10,
        }
    }
}


